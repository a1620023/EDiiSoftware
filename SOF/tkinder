import tkinter as tk
import random
from cryptography.fernet import Fernet

class Cliente:
    def __init__(self, nombre, direccion, apellidos, numeroDeCelular):
        self.nombre = nombre
        self.direccion = direccion
        self.apellidos = apellidos
        self.numeroDeCelular = numeroDeCelular
        self.codigo_autenticacion = str(random.randint(10000000, 99999999))
        self.productos = []

class Producto:
    def __init__(self, modelo_celular, plan_movil):
        self.modelo_celular = modelo_celular
        self.plan_movil = plan_movil

class Aplicacion(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Gestion de datos")
        self.geometry("400x300")
        self.configure(bg="lightblue")

        self.pantalla_actual = "principal"
        self.cliente_actual = None

        self.clave_secreta = b'clave_secreta'  # Clave secreta para el cifrado

        self.crear_pantalla_principal()

    def crear_pantalla_principal(self):
        self.nuevo_cliente_button = tk.Button(self, text="Nuevo Cliente", command=self.crear_pantalla_nuevo_cliente, font=("bold"))
        self.nuevo_cliente_button.pack(pady=10, side="top", anchor="center")

        self.ver_productos_button = tk.Button(self, text="Ver Productos", command=self.crear_pantalla_ver_productos, font=("bold"))
        self.ver_productos_button.pack(pady=10, side="top", anchor="center")

    def crear_pantalla_ver_productos(self):
        self.pantalla_actual = "productos"

        self.ver_productos_button.destroy()
        self.nuevo_cliente_button.destroy()

        self.codigo_autenticacion_label = tk.Label(self, text="Código de Autenticación:", font=("bold"), bg="lightblue")
        self.codigo_autenticacion_label.pack()

        self.codigo_autenticacion_entry = tk.Entry(self, show="*", bg="lightblue")
        self.codigo_autenticacion_entry.pack(pady=5)

        self.confirmar_button = tk.Button(self, text="Confirmar", command=self.verificar_autenticacion, font=("bold"))
        self.confirmar_button.pack(pady=5)

        self.regresar_button = tk.Button(self, text="Regresar", command=self.regresar_pantalla_principal, font=("bold"))
        self.regresar_button.pack(pady=5)

    def verificar_autenticacion(self):
        codigo_ingresado = self.codigo_autenticacion_entry.get()

        if self.cliente_actual and codigo_ingresado == self.cliente_actual.codigo_autenticacion:
            self.codigo_autenticacion_label.destroy()
            self.codigo_autenticacion_entry.destroy()
            self.confirmar_button.destroy()
            self.regresar_button.destroy()

            self.crear_pantalla_resumen()
        else:
            # Código de autenticación incorrecto, mostrar mensaje de error
            self.mostrar_mensaje_error("Código de autenticación incorrecto", font=("bold"))

    def crear_pantalla_resumen(self):
        self.pantalla_actual = "resumen"

        self.resumen_label = tk.Label(self, text="Resumen:", font=("bold"), bg="lightblue")
        self.resumen_label.pack()

        nombre_cliente = self.desencriptar_dato(self.cliente_actual.nombre)
        direccion_cliente = self.desencriptar_dato(self.cliente_actual.direccion)
        apellidos_cliente = self.desencriptar_dato(self.cliente_actual.apellidos)
        numero_cliente = self.desencriptar_dato(self.cliente_actual.numeroDeCelular)

        resumen_text = f"Nombre: {nombre_cliente}\nDirección: {direccion_cliente}\nApellidos: {apellidos_cliente}\nNúmero de Celular: {numero_cliente}"
        self.resumen_text_label = tk.Label(self, text=resumen_text, bg="lightblue")
        self.resumen_text_label.pack()

        self.regresar_button = tk.Button(self, text="Regresar", command=self.regresar_pantalla_principal, font=("bold"))
        self.regresar_button.pack(pady=5)

    def crear_pantalla_nuevo_cliente(self):
        self.pantalla_actual = "nuevo_cliente"

        self.nuevo_cliente_button.destroy()
        self.ver_productos_button.destroy()

        self.nombre_label = tk.Label(self, text="Nombre:", font=("bold"), bg="lightblue")
        self.nombre_label.pack()

        self.nombre_entry = tk.Entry(self, bg="lightblue")
        self.nombre_entry.pack(pady=5)

        self.direccion_label = tk.Label(self, text="Dirección:", font=("bold"), bg="lightblue")
        self.direccion_label.pack()

        self.direccion_entry = tk.Entry(self, bg="lightblue")
        self.direccion_entry.pack(pady=5)

        self.apellidos_label = tk.Label(self, text="Apellidos:", font=("bold"), bg="lightblue")
        self.apellidos_label.pack()

        self.apellidos_entry = tk.Entry(self, bg="lightblue")
        self.apellidos_entry.pack(pady=5)

        self.numero_label = tk.Label(self, text="Número de Celular:", font=("bold"), bg="lightblue")
        self.numero_label.pack()

        self.numero_entry = tk.Entry(self, bg="lightblue")
        self.numero_entry.pack(pady=5)

        self.confirmar_button = tk.Button(self, text="Confirmar", command=self.crear_cliente, font=("bold"))
        self.confirmar_button.pack(pady=5)

        self.regresar_button = tk.Button(self, text="Regresar", command=self.regresar_pantalla_principal, font=("bold"))
        self.regresar_button.pack(pady=5)

    def crear_cliente(self):
        nombre = self.encriptar_dato(self.nombre_entry.get())
        direccion = self.encriptar_dato(self.direccion_entry.get())
        apellidos = self.encriptar_dato(self.apellidos_entry.get())
        numeroDeCelular = self.encriptar_dato(self.numero_entry.get())

        self.cliente_actual = Cliente(nombre, direccion, apellidos, numeroDeCelular)

        self.nombre_label.destroy()
        self.nombre_entry.destroy()
        self.direccion_label.destroy()
        self.direccion_entry.destroy()
        self.apellidos_label.destroy()
        self.apellidos_entry.destroy()
        self.numero_label.destroy()
        self.numero_entry.destroy()
        self.confirmar_button.destroy()
        self.regresar_button.destroy()

        self.mostrar_mensaje_confirmacion("Cliente creado exitosamente", font=("bold"))

    def regresar_pantalla_principal(self):
        if self.pantalla_actual == "nuevo_cliente":
            self.nombre_label.destroy()
            self.nombre_entry.destroy()
            self.direccion_label.destroy()
            self.direccion_entry.destroy()
            self.apellidos_label.destroy()
            self.apellidos_entry.destroy()
            self.numero_label.destroy()
            self.numero_entry.destroy()
            self.confirmar_button.destroy()
            self.regresar_button.destroy()

        elif self.pantalla_actual == "productos":
            self.codigo_autenticacion_label.destroy()
            self.codigo_autenticacion_entry.destroy()
            self.confirmar_button.destroy()
            self.regresar_button.destroy()

        elif self.pantalla_actual == "resumen":
            self.resumen_label.destroy()
            self.resumen_text_label.destroy()
            self.regresar_button.destroy()

        self.crear_pantalla_principal()

    def encriptar_dato(self, dato):
        f = Fernet(self.clave_secreta)
        dato_encriptado = f.encrypt(dato.encode())
        return dato_encriptado.decode()

    def desencriptar_dato(self, dato_encriptado):
        f = Fernet(self.clave_secreta)
        dato_desencriptado = f.decrypt(dato_encriptado.encode())
        return dato_desencriptado.decode()

    def mostrar_mensaje_error(self, mensaje, font):
        self.mensaje_error_label = tk.Label(self, text=mensaje, font=font, fg="red", bg="lightblue")
        self.mensaje_error_label.pack(pady=5)

    def mostrar_mensaje_confirmacion(self, mensaje, font):
        self.mensaje_confirmacion_label = tk.Label(self, text=mensaje, font=font, fg="green", bg="lightblue")
        self.mensaje_confirmacion_label.pack(pady=5)


app = Aplicacion()
app.mainloop()

